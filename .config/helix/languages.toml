# ================ LANGUAGES ================

# Haskell
[[language]]
name = "haskell"
language-servers = ["haskell-language-server"]
auto-format = true
indent = { tab-width = 4, unit = "    " }

# JavaScript
[[language]]
name = "javascript"
language-servers = ["typescript-language-server", "vscode-eslint-language-server", "emmet-lsp"]
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "typescript"] }
indent = { tab-width = 4, unit = "    " }

# JSX
[[language]]
name = "jsx"
language-servers = ["typescript-language-server", "vscode-eslint-language-server", "emmet-lsp"]
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "typescript"] }
indent = { tab-width = 4, unit = "    " }

# TypeScript
[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "vscode-eslint-language-server", "emmet-lsp"]
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "typescript"] }
indent = { tab-width = 4, unit = "    " }

# TSX
[[language]]
name = "tsx"
language-servers = ["typescript-language-server", "vscode-eslint-language-server", "emmet-lsp"]
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "typescript"] }
indent = { tab-width = 4, unit = "    " }

# HTML
[[language]]
name = "html"
language-servers = ["vscode-html-language-server", "emmet-lsp"]
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "html"] }
indent = { tab-width = 4, unit = "    " }

# CSS
[[language]]
name = "css"
language-servers = ["vscode-css-language-server", "emmet-lsp"]
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "css"] }
indent = { tab-width = 4, unit = "    " }

# JSON
[[language]]
name = "json"
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "json"] }
indent = { tab-width = 4, unit = "    " }

# JSONC
[[language]]
name = "jsonc"
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "jsonc"] }
indent = { tab-width = 4, unit = "    " }

# TOML
[[language]]
name = "toml"
language-servers = ["taplo"]
auto-format = true
formatter = { command = "taplo", args = ["fmt", "-"] }
indent = { tab-width = 4, unit = "    " }

# Markdown
[[language]]
name = "markdown"
language-servers = ["marksman", "harper-ls", "mdpls"]
auto-format = true
formatter = { command = "npx", args = ["prettier", "--parser", "markdown"] }
indent = { tab-width = 4, unit = "    " }
soft-wrap = { enable = true }

# typst
[[language]]
name = "typst"
language-servers = ["tinymist"]
auto-format = true
indent = { tab-width = 4, unit = "    " }
soft-wrap = { enable = true }

# ================= SERVERS =================

# haskell-language-server
[language-server.haskell-language-server.config]
formattingProvider = "fourmolu"
checkParents = "AlwaysCheck"

[language-server.haskell-language-server.config.plugin]
semanticTokens = { globalOn = true }
stan = { globalOn = true, config = { diff = true } }
rename = { config = { diff = true } }
hlint = { config = { flags = [
    "--with-group=future",
    "--with-group=extra",
    "--with-group=use-lens",
    "--with-group=use-th-quotes",
    "--with-group=generalise",
    "--with-group=generalise-for-conciseness",
    "--with-group=dollar",
    "--with-group=teaching",
] } }

# emmet-lsp
[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

# vscode-json-language-server
[language-server.vscode-json-language-server.config.json]
validate = { enable = true }
schemas = [
    { fileMatch = [
        "package.json",
    ], url = "https://json.schemastore.org/package.json" },
    { fileMatch = [
        "tsconfig.json",
        "tsconfig.*.json",
    ], url = "https://json.schemastore.org/tsconfig.json" },
    { fileMatch = [
        ".prettierrc.json",
        ".prettierrc",
    ], url = "https://json.schemastore.org/prettierrc.json" },
    { fileMatch = [
        "manifest.json",
    ], url = "https://json.schemastore.org/chrome-manifest.json" },
]

# rust-analyzer
[language-server.rust-analyzer.config]
check.command = "clippy"
check.extraArgs = ["--", "-W", "clippy::pedantic", "-W", "clippy::nursery"]

imports.prefix = "crate"
imports.prefixExternPrelude = true
imports.granularity.enforce = true

diagnostics.styleLints.enable = true
diagnostics.experimental.enable = true

assist.expressionFillDefault = "default"

inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false

# harper-ls
[language-server.harper-ls]
command = "harper-ls"
args = ["--stdio"]

[language-server.harper-ls.config.harper-ls]
codeActions = { forceStable = true }

[language-server.harper-ls.config.harper-ls.linters]
spell_check = true
spelled_numbers = false
an_a = true
sentence_capitalization = false
unclosed_quotes = true
wrong_quotes = false
long_sentences = true
repeated_words = true
spaces = true
matcher = true
correct_number_suffix = true
number_suffix_capitalization = true
multiple_sequential_pronouns = true
linking_verbs = false
avoid_curses = true
terminating_conjunctions = true

# mdpls
[language-server.mdpls]
command = "mdpls"

[language-server.mdpls.config]
markdown.preview.auto = false
markdown.preview.serveStatic = true
markdown.preview.browser = "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"

# tinymist
[language-server.tinymist]
command = "tinymist"

[language-server.tinymist.config]
exportPdf = "onType"
formatterMode = "typstyle"
formatterPrintWidth = "90"

# vscode-html-language-server
[vscode-html-language-server.config]
provideFormatter = false

# vscode-css-language-server
[vscode-css-language-server.config]
provideFormatter = false

# vscode-json-language-server
[vscode-json-language-server.config]
provideFormatter = false
