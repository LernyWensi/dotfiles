# ================ LANGUAGES ================

# Fish
[[language]]
name = 'fish'
language-servers = ['harper-ls']
auto-format = false

# Rust
[[language]]
name = 'rust'
language-servers = ['rust-analyzer', 'harper-ls']

# Haskell
[[language]]
name = 'haskell'
language-servers = ['haskell-language-server', 'harper-ls']
auto-format = true
indent = { tab-width = 4, unit = '  ' }

# Cabal
[[language]]
name = 'cabal'
file-types = ['cabal', 'project']
auto-format = true

# C
[[language]]
name = 'c'
language-servers = ['clangd', 'harper-ls']
file-types = ['c', 'h']
indent = { tab-width = 4, unit = '  ' }
auto-format = true

# C++
[[language]]
name = 'cpp'
language-servers = ['clangd', 'harper-ls']
indent = { tab-width = 4, unit = '  ' }
auto-format = true

# JavaScript
[[language]]
name = 'javascript'
language-servers = ['typescript-language-server', 'vscode-eslint-language-server', 'harper-ls']
formatter = { command = 'npx', args = ['prettier', '--parser', 'typescript'] }
indent = { tab-width = 4, unit = '    ' }
auto-format = true

# JSX
[[language]]
name = 'jsx'
language-servers = ['typescript-language-server', 'vscode-eslint-language-server', 'tailwindcss-ls', 'emmet-lsp', 'harper-ls']
formatter = { command = 'npx', args = ['prettier', '--parser', 'typescript'] }
indent = { tab-width = 4, unit = '    ' }
auto-format = true

# TypeScript
[[language]]
name = 'typescript'
language-servers = ['typescript-language-server', 'vscode-eslint-language-server', 'harper-ls']
formatter = { command = 'npx', args = ['prettier', '--parser', 'typescript'] }
indent = { tab-width = 4, unit = '    ' }
auto-format = true

# TSX
[[language]]
name = 'tsx'
language-servers = ['typescript-language-server', 'vscode-eslint-language-server', 'tailwindcss-ls', 'emmet-lsp', 'harper-ls']
formatter = { command = 'npx', args = ['prettier', '--parser', 'typescript'] }
indent = { tab-width = 4, unit = '    ' }
auto-format = true

# HTML
[[language]]
name = 'html'
language-servers = ['vscode-html-language-server', 'tailwindcss-ls', 'emmet-lsp', 'harper-ls']
formatter = { command = 'npx', args = ['prettier', '--parser', 'html'] }
indent = { tab-width = 4, unit = '    ' }

# CSS
[[language]]
name = 'css'
language-servers = ['vscode-css-language-server', 'tailwindcss-ls', 'emmet-lsp']
formatter = { command = 'npx', args = ['prettier', '--parser', 'css'] }
indent = { tab-width = 4, unit = '    ' }

# JSON
[[language]]
name = 'json'
formatter = { command = 'npx', args = ['prettier', '--parser', 'json'] }
indent = { tab-width = 4, unit = '    ' }

# JSONC
[[language]]
name = 'jsonc'
formatter = { command = 'npx', args = ['prettier', '--parser', 'jsonc'] }
indent = { tab-width = 4, unit = '    ' }

# TOML
[[language]]
name = 'toml'
language-servers = ['taplo', 'harper-ls']
formatter = { command = 'taplo', args = ['fmt', '-'] }
indent = { tab-width = 4, unit = '    ' }
auto-format = true

# Markdown
[[language]]
name = 'markdown'
language-servers = ['marksman', 'mdpls', 'harper-ls']
formatter = { command = 'npx', args = ['prettier', '--parser', 'markdown'] }
indent = { tab-width = 4, unit = '    ' }
auto-format = true
soft-wrap.enable = true

# typst
[[language]]
name = 'typst'
language-servers = ['tinymist', 'harper-ls']
indent = { tab-width = 4, unit = '    ' }
auto-format = true
soft-wrap.enable = true

[[language]]
name = 'git-config'
file-types = [{ glob = '.gitmodules' }, { glob = '.gitconfig.local' }, { glob = '.gitconfig' }, { glob = '.git/config' }, { glob = '.config/git/config' }]

[[language]]
name = 'git-commit'
language-servers = ['harper-ls']

# ================= SERVERS =================

# haskell-language-server
[language-server.haskell-language-server.config]
checkParents = 'AlwaysCheck'
formattingProvider = 'fourmolu'
cabalFormattingProvider = 'cabal-gild'

[language-server.haskell-language-server.config.plugin]
fourmolu.config.external = true
rename.config.crossModule = true
hlint.config.flags = [
    '--with-group=future',
    '--with-group=extra',
    '--with-group=use-lens',
    '--with-group=use-th-quotes',
    '--with-group=generalise',
    '--with-group=generalise-for-conciseness',
    '--with-group=dollar',
    '--with-group=teaching',
]

# emmet-lsp
[language-server.emmet-lsp]
command = 'emmet-language-server'
args = ['--stdio']

# vscode-json-language-server
[language-server.vscode-json-language-server.config.json]
validate = { enable = true }
schemas = [
    { fileMatch = [
        'package.json',
    ], url = 'https://json.schemastore.org/package.json' },
    { fileMatch = [
        'tsconfig.json',
        'tsconfig.*.json',
    ], url = 'https://json.schemastore.org/tsconfig.json' },
    { fileMatch = [
        '.prettierrc.json',
        '.prettierrc',
    ], url = 'https://json.schemastore.org/prettierrc.json' },
    { fileMatch = [
        'manifest.json',
    ], url = 'https://json.schemastore.org/chrome-manifest.json' },
]

# rust-analyzer
[language-server.rust-analyzer.config]
completion.callable.snippets = 'none'
inlayHints.implicitDrops.enable = true

interpret.tests = true
procMacro.enable = true

cargo.features = 'all'

files.watcher = 'server'

[language-server.rust-analyzer.config.check]
features = 'all'
command = 'clippy'

[language-server.rust-analyzer.config.rustfmt]
extraArgs = ['+nightly']
rangeFormatting.enable = true

[language-server.rust-analyzer.config.diagnostics]
styleLints.enable = true
experimental.enable = true

# harper-ls
[language-server.harper-ls]
command = 'harper-ls'
args = ['--stdio']

[language-server.harper-ls.config.harper-ls.codeActions]
ForceStable = true

[language-server.harper-ls.config.harper-ls.linters]
UseGenitive = true
BoringWords = true
AnotherThinkComing = true

# mdpls
[language-server.mdpls]
command = 'mdpls'

[language-server.mdpls.config]
markdown.preview.auto = false
markdown.preview.serveStatic = true
markdown.preview.browser = '/mnt/c/Program Files/Google/Chrome/Application/chrome.exe'

# tinymist
[language-server.tinymist.config]
exportPdf = 'onType'
outputPath = '$dir/dist/$name'

formatterMode = 'typstyle'
formatterIndentSize = 4
formatterPrintWidth = 120

[language-server.tinymist.config.lint]
enabled = true
when = 'onType'

[language-server.tinymist.config.preview]
cursorIndicator = true
scrollSync = 'onSelectionChange'

[language-server.tinymist.config.preview.background]
enabled = true
args = ['--data-plane-host=127.0.0.1:23626', '--invert-colors=never', '--open']

# tailwindcss-ls
[language-server.tailwindcss-ls]
command = 'tailwindcss-language-server'
args = ['--stdio']

# vscode-html-language-server
[vscode-html-language-server.config]
provideFormatter = false

# vscode-css-language-server
[vscode-css-language-server.config]
provideFormatter = false

# vscode-json-language-server
[vscode-json-language-server.config]
provideFormatter = false
